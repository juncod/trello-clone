{"version":3,"sources":["atoms.tsx","components/DragabbleCard.tsx","components/Board.tsx","App.tsx","index.tsx","theme.ts"],"names":["toDoState","atom","key","default","Doing","Done","Card","styled","div","props","isDragging","theme","cardColor","DragabbleCard","toDoId","toDoText","index","toDos","useRecoilValue","localStorage","setItem","JSON","stringify","draggableId","magic","snapshot","ref","innerRef","dragHandleProps","draggableProps","React","memo","Wrapper","boardColor","Title","h2","Area","isDraggingOver","isDraggingFromThis","Form","form","Board","boardId","setToDos","useSetRecoilState","useForm","register","setValue","handleSubmit","useEffect","getItem","retrievedObject","parse","onSubmit","toDo","newToDo","id","Date","now","text","allBoards","required","type","placeholder","autoComplete","droppableId","info","Boolean","draggingFromThisWith","droppableProps","map","Reset","button","HomeWrapper","Boards","DeleteBox","App","useRecoilState","onDragEnd","destination","source","boardCopy","splice","taskObj","sourceBoard","destinationBoard","title","onClick","removeItem","Object","keys","GlobalStyle","createGlobalStyle","bgColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5fd535c5.chunk.js","sourcesContent":["import { atom } from \"recoil\";\r\n\r\nexport interface ITodo {\r\n    id: number;\r\n    text: string;\r\n}\r\n\r\ninterface IToDoState {\r\n    [key: string]: ITodo[];\r\n}\r\n\r\nexport const toDoState = atom<IToDoState>({\r\n    key: \"toDo\",\r\n    default: {\r\n        \"To Do\": [],\r\n        Doing: [],\r\n        Done: [],\r\n    },\r\n});","import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { toDoState } from '../atoms';\r\nimport styled from 'styled-components';\r\n\r\nconst Card = styled.div<{ isDragging: boolean }>`\r\n  border-radious: 5px;\r\n  margin-bottom: 5px;\r\n  padding: 10px;\r\n  background-color: ${(props) => props.isDragging ? \"#e4f2ff\" : props.theme.cardColor};\r\n  box-shadow: ${(props) =>\r\n    props.isDragging ? \"0px 2px 5px rgba(0,0,0,0.05)\" : \"none\"};\r\n`;\r\n\r\ninterface IDragablbleCardProps {\r\n  toDoId: number;\r\n  toDoText: string;\r\n  index: number;\r\n}\r\n\r\nfunction DragabbleCard({ toDoId, toDoText, index }: IDragablbleCardProps) {\r\n  const toDos = useRecoilValue(toDoState);\r\n  localStorage.setItem(\"schedule\", JSON.stringify(toDos));\r\n  return (\r\n    <Draggable draggableId={toDoId + \"\"} index={index}>\r\n      {(magic, snapshot) => (\r\n        <Card\r\n          isDragging={snapshot.isDragging}\r\n          ref={magic.innerRef}\r\n          {...magic.dragHandleProps}\r\n          {...magic.draggableProps}\r\n        >\r\n          {toDoText}\r\n        </Card>\r\n      )}\r\n    </Draggable>);\r\n}\r\n\r\nexport default React.memo(DragabbleCard);","import { useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\nimport DragabbleCard from \"./DragabbleCard\";\r\nimport { ITodo, toDoState } from \"../atoms\";\r\nimport { useSetRecoilState } from \"recoil\";\r\n\r\n\r\nconst Wrapper = styled.div`\r\n  width: 300px;\r\n  padding-top: 10px;\r\n  background-color: ${(props) => props.theme.boardColor};\r\n  border-radius: 5px;\r\n  min-height: 300px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n`;\r\nconst Title = styled.h2`\r\n  text-align: center;\r\n  font-weight: 600;\r\n  margin-bottom: 10px;\r\n  font-size: 18px;\r\n`;\r\ninterface IAreaProps {\r\n  isDraggingFromThis: boolean;\r\n  isDraggingOver: boolean;\r\n}\r\nconst Area = styled.div<IAreaProps>`\r\n  background-color: ${(props) =>\r\n    props.isDraggingOver\r\n      ? \"#dfe6e9\"\r\n      : props.isDraggingFromThis\r\n        ? \"#b2bec3\"\r\n        : \"transparent\"};\r\n  flex-grow: 1;\r\n  transition: background-color 0.3s ease-in-out;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-bottom: 10px;\r\n  input {\r\n    width: 100%;\r\n    font-size: 16px;\r\n    border: 0;\r\n    background-color: white;\r\n    width: 80%;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    text-align: center;\r\n    margin: 0 auto;\r\n  }\r\n`;\r\n\r\ninterface IBoardProps {\r\n  toDos: ITodo[];\r\n  boardId: string;\r\n}\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\nfunction Board({ toDos, boardId }: IBoardProps) {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const { register, setValue, handleSubmit } = useForm<IForm>();\r\n  const onValid = ({ toDo }: IForm) => {\r\n    const newToDo = {\r\n      id: Date.now(),\r\n      text: toDo,\r\n    };\r\n    setToDos((allBoards) => {\r\n      return {\r\n        ...allBoards,\r\n        [boardId]: [newToDo, ...allBoards[boardId]],\r\n      };\r\n    });\r\n    setValue(\"toDo\", \"\");\r\n  };\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"schedule\")) {\r\n      var retrievedObject = localStorage.getItem(\"schedule\")\r\n      setToDos(JSON.parse(retrievedObject as any))\r\n    }\r\n  }, []);\r\n  return (\r\n    <Wrapper>\r\n      <Title>{boardId}</Title>\r\n      <Form onSubmit={handleSubmit(onValid)}>\r\n        <input\r\n          {...register(\"toDo\", { required: true })}\r\n          type=\"text\"\r\n          placeholder={`Add task on ${boardId}`}\r\n          autoComplete='off'\r\n        />\r\n      </Form>\r\n      <Droppable droppableId={boardId}>\r\n        {(magic, info) => (\r\n          <Area\r\n            isDraggingOver={info.isDraggingOver}\r\n            isDraggingFromThis={Boolean(info.draggingFromThisWith)}\r\n            ref={magic.innerRef}\r\n            {...magic.droppableProps}\r\n          >\r\n            {toDos.map((toDo, index) => (\r\n              <DragabbleCard\r\n                key={toDo.id}\r\n                index={index}\r\n                toDoId={toDo.id}\r\n                toDoText={toDo.text}\r\n              />\r\n            ))}\r\n            {magic.placeholder}\r\n          </Area>\r\n        )}\r\n      </Droppable>\r\n    </Wrapper>\r\n  );\r\n}\r\nexport default Board;","import { DragDropContext, DropResult, Droppable } from \"react-beautiful-dnd\";\nimport { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { toDoState } from \"./atoms\";\nimport Board from \"./components/Board\";\n\nconst Reset = styled.button`\n  position: relative;\n  bottom: 10vh;\n  left: 15vw;\n  width: 100px;\n  height: 40px;\n  border: none;\n  border-radius: 10px;\n  background-color: #d6827a;\n  text-align: center;\n  color: white;\n  font-weight: 600;\n  font-size: 20px;\n  &:hover{\n    box-shadow: 0px 0px 15px rgba(255,255,255,0.8);\n    border: solid 1px rgba(255,255,255,1);\n  }\n  &:onclick{\n    background-color: rgba(255,255,255,1);\n  }\n \n`;\n\nconst HomeWrapper = styled.div`\ndisplay: flex;\nflex-direction:column;\nalign-items: center;\n`;\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100vw;\n  margin: 0 auto;\n  justify-content: center;\n  align-items: start;\n`;\nconst Form = styled.form`\n  width: 100%;\n  display: flex;\n  padding-top: 25vh;\n  margin-bottom: 5vh;\n  justify-content: center;\n  padding-bottom: 10px;\n  input {\n    font-size: 16px;\n    border: 0;\n    background-color: white;\n    width: 20%;\n    padding: 10px;\n    border-radius: 5px;\n    text-align: center;\n    margin: 0 auto;\n  }\n`;\nconst Boards = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  width: 100%;\n  gap: 10px;\n`;\nconst DeleteBox = styled.div<{ isDraggingOver: boolean }>`\n  background-color: ${(props) =>\n    props.isDraggingOver\n      ? \"#d6827a\"\n      : \"#b2bec3\"};\n  width: 500px;\n  text-align: center;\n  font-weight: 600;\n  font-size: 38px;\n  margin-top: 40px;\n  padding: 30px 125px;\n  transition: background-color 0.3s ease-in-out;\n`;\ninterface IForm {\n  title: string;\n}\nfunction App() {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const onDragEnd = (info: DropResult) => {\n    const { destination, source } = info;\n    if (!destination) return;\n    if (destination?.droppableId === \"delete\") {\n      setToDos((allBoards) => {\n        const boardCopy = [...allBoards[source.droppableId]];\n        boardCopy.splice(source.index, 1);\n        return {\n          ...allBoards,\n          [source.droppableId]: boardCopy,\n        };\n      })\n    }\n    else if (destination?.droppableId === source.droppableId) {\n      // same board movement.\n      setToDos((allBoards) => {\n        const boardCopy = [...allBoards[source.droppableId]];\n        const taskObj = boardCopy[source.index];\n        boardCopy.splice(source.index, 1);\n        boardCopy.splice(destination?.index, 0, taskObj);\n        return {\n          ...allBoards,\n          [source.droppableId]: boardCopy,\n        };\n      });\n    }\n    else if (destination?.droppableId !== source.droppableId) {\n      // cross board movement\n      setToDos((allBoards) => {\n        const sourceBoard = [...allBoards[source.droppableId]];\n        const taskObj = sourceBoard[source.index];\n        const destinationBoard = [...allBoards[destination.droppableId]];\n        sourceBoard.splice(source.index, 1);\n        destinationBoard.splice(destination?.index, 0, taskObj);\n        return {\n          ...allBoards,\n          [source.droppableId]: sourceBoard,\n          [destination.droppableId]: destinationBoard,\n        };\n      });\n    }\n  };\n  const { register, setValue, handleSubmit } = useForm<IForm>();\n  const onValid = ({ title }: IForm) => {\n    setToDos((allBoards) => {\n      return {\n        ...allBoards,\n        [title]: [],\n      };\n    });\n    setValue(\"title\", \"\");\n  };\n  const onDelete = () => {\n    localStorage.removeItem('schedule');\n    const initialState = {\n      \"To Do\": [],\n      Doing: [],\n      Done: [],\n    };\n    setToDos(initialState)\n  }\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <HomeWrapper>\n        <Form onSubmit={handleSubmit(onValid)}>\n          <input\n            {...register(\"title\", { required: true })}\n            type=\"text\"\n            placeholder={`Add board`}\n            autoComplete='off'\n          />\n        </Form>\n        <Reset onClick={onDelete}>Reset</Reset>\n        <Wrapper>\n          <Boards>\n            {Object.keys(toDos).map((boardId) => (\n              <Board boardId={boardId} key={boardId} toDos={toDos[boardId]} />\n            ))}\n          </Boards>\n        </Wrapper>\n        <Droppable droppableId=\"delete\">\n          {(magic, info) => (\n            <DeleteBox\n              isDraggingOver={info.isDraggingOver}\n              ref={magic.innerRef}\n              {...magic.droppableProps}>\n              DELETE\n            </DeleteBox>\n          )}\n        </Droppable>\n      </HomeWrapper>\n    </DragDropContext>\n  );\n}\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkmode } from \"./theme\";\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:black;\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkmode}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkmode: DefaultTheme = {\r\n    bgColor: \"#3F8CF2\",\r\n    boardColor: \"#DADFE9\",\r\n    cardColor: \"white\",\r\n};\r\n"],"sourceRoot":""}